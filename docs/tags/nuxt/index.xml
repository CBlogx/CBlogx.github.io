<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
    <channel>
        <title>nuxt on Cheng の webstie</title>
        <link>https://cblogx.github.io/tags/nuxt/</link>
        <description>Recent content in nuxt on Cheng の webstie</description>
        <generator>Hugo -- gohugo.io</generator>
        <language>en-us</language>
        <lastBuildDate>Mon, 18 Apr 2022 00:17:03 +0800</lastBuildDate><atom:link href="https://cblogx.github.io/tags/nuxt/index.xml" rel="self" type="application/rss+xml" /><item>
        <title>Nuxt系列（1）初识SSR</title>
        <link>https://cblogx.github.io/vue/nuxt%E7%B3%BB%E5%88%971%E5%88%9D%E8%AF%86ssr/</link>
        <pubDate>Mon, 18 Apr 2022 00:17:03 +0800</pubDate>
        
        <guid>https://cblogx.github.io/vue/nuxt%E7%B3%BB%E5%88%971%E5%88%9D%E8%AF%86ssr/</guid>
        <description>&lt;h1 id=&#34;什么是ssr&#34;&gt;什么是SSR&lt;/h1&gt;
&lt;blockquote&gt;
&lt;p&gt;首先让我们来了解一下MPA、SPA,最后你就明白了什么是SSR&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&#34;mpa多页面应用&#34;&gt;MPA（多页面应用）&lt;/h2&gt;
&lt;p&gt;传统的web开发过程：客户端向服务端发送请求，服务端在进行一系列数据处理后生成&lt;code&gt;html&lt;/code&gt;页面，然后将&lt;code&gt;html&lt;/code&gt;页面返回给客户端。&lt;/p&gt;
&lt;p&gt;&lt;code&gt;MPA&lt;/code&gt;多页面应用即指拥有多个独立页面的应用，每个页面互不干扰，自身都携带js、css等资源，在进行页面跳转时需要整个页面的资源重新刷新。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;优点：&lt;/strong&gt;&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;首屏加载速度快&lt;/p&gt;
&lt;p&gt;访问网站进入首页，服务器只需返回一个&lt;code&gt;html&lt;/code&gt;页面即可，这个过程只经历了一次http请求，所以页面展示速度非常快。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;SEO效果好&lt;/p&gt;
&lt;p&gt;搜索引擎在做网页排名时，要根据网页的内容才能给网页权重，从而进行网页排名。搜索引擎可以识别&lt;code&gt;html&lt;/code&gt;内容，每个页面所有的内容都在&lt;code&gt;html&lt;/code&gt;中，所以MPA的SEO排名效果好&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;strong&gt;缺点：&lt;/strong&gt;&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;页面切换慢&lt;/p&gt;
&lt;p&gt;因为每次跳转都是切换到一个新的页面，客户端需要重新发送&lt;code&gt;http&lt;/code&gt;请求，服务端需要重新渲染生成&lt;code&gt;html&lt;/code&gt;返回给客户端，如果网络状态不佳，那么在页面之间来回跳转时就会发生明显的卡顿，影响用户的体验。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;用户体验不佳&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&#34;spa单页面应用&#34;&gt;SPA（单页面应用）&lt;/h2&gt;
&lt;p&gt;&lt;strong&gt;SPA的渲染过程：&lt;/strong&gt; 由客户端访问&lt;code&gt;URL&lt;/code&gt;发送请求到服务端，服务端返回一个含有基本结构的&lt;code&gt;html&lt;/code&gt;外壳。客户端接收到该&lt;code&gt;html&lt;/code&gt;结构后便开始渲染，若在渲染过程中需要请求数据则会再次向服务端发送请求，服务端返回数据后由客户端完成数据处理和最终渲染。页面之间的跳转实际上是组件状态的变化。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;优点：&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;页面之间的切换非常快，在一定程度上减少了后端服务器的压力。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;缺点：&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;首屏打开速度很慢，因为用户首次加载需要下载SPA框架及应用程序代码，必须等待JS执行完毕才能渲染出首屏。&lt;/li&gt;
&lt;li&gt;不利于&lt;code&gt;SEO&lt;/code&gt;，爬虫只能拿到一个少量&lt;code&gt;html&lt;/code&gt;元素，认为页面是空的，不利于&lt;code&gt;SEO&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;ssr-服务端渲染&#34;&gt;SSR （服务端渲染）&lt;/h2&gt;
&lt;p&gt;&lt;code&gt;SSR&lt;/code&gt;并非传统完全基于后端的&lt;code&gt;SSR&lt;/code&gt;，而是基于前端的&lt;code&gt;SSR&lt;/code&gt;，是介于&lt;code&gt;MPA&lt;/code&gt;和&lt;code&gt;SPA&lt;/code&gt;之间的折中方案，后端渲染出首屏的&lt;code&gt;DOM&lt;/code&gt;结构返回，客户端拿到首屏内容，再用单页面路由和渲染，故称之为基于前端的&lt;code&gt;SSR&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;SSR渲染过程：&lt;/strong&gt; 客户端发送请求到服务端，服务端读取对应&lt;code&gt;URL&lt;/code&gt;的模板信息，在服务端做出&lt;code&gt;html&lt;/code&gt;和数据的渲染，渲染完成后返回整个首屏的&lt;code&gt;html&lt;/code&gt;结构给客户端。所以当用户访问首屏时，速度就会相较于单纯使用&lt;code&gt;SPA&lt;/code&gt;的方式要快得多，但是该应用仍旧是一个&lt;code&gt;SPA&lt;/code&gt;应用。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;缺点：&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;开发条件所限。浏览器特定的代码，例如document，windows等函数只能在某些生命周期钩子函数（&lt;code&gt;lifecycle hook&lt;/code&gt;）中使用。一些外部扩展库（&lt;code&gt;external library&lt;/code&gt;）需要经过特殊处理才能在服务端渲染应用中运行。&lt;/li&gt;
&lt;li&gt;涉及构建设置和部署的更多要求。与可以部署在任何静态文件服务器上的完全静态单页面应用程序（SPA）不同，服务器渲染应用程序需要处于&lt;code&gt;Node.js&lt;/code&gt;运行环境中&lt;/li&gt;
&lt;li&gt;更多的服务器负载。在Node.js中渲染完整的应用程序，显然会比仅仅提供静态文件的server更加大量占用CPU资源，在高流量环境下使用SSR时需要足够的服务器配置并采取一定的缓存策略。&lt;/li&gt;
&lt;/ul&gt;
</description>
        </item>
        
    </channel>
</rss>
